#!/usr/bin/env bash
#

function usage() {
	echo "USAGE:"
	echo "./run logmode CONFIG_FILE=< config.yaml >"
	echo "./run backtesting CONFIG_FILE=< config.yaml >"
	echo "./run testnet CONFIG_FILE=< config.yaml >"
	echo "./run live CONFIG_FILE=< config.yaml >"
	echo "./run compress-logs"
	echo "./run lastfewdays DAYS=3 PAIR=USDT"
	echo "./run download-price-logs FROM=20210101 TO=20211231"
	echo "./run prove-backtesting CONFIG_FILE=myconfig.yaml"
	echo "./run config-endpoint-service BIND=0.0.0.0 CONFIG_FILE=myconfig.yaml"
	echo "./run klines-caching-service BIND=0.0.0.0"
	echo "./run price_log_service BIND=0.0.0.0"
	echo "./run download_price_logs FROM=20220101 TO=20220131"
}

function free_port () { # looks for a free TCP port
    LPORT=32768;
    UPORT=60999;
    while true; do
        MPORT=$[$LPORT + ($RANDOM % $UPORT)];
        (echo "" >/dev/tcp/127.0.0.1/${MPORT}) >/dev/null 2>&1
        if [ $? -ne 0 ]; then
            echo $MPORT;
            return 0;
        fi
    done
}

function set_service_ports () { # locks a port to use by each service
	for service in $*
	do
		if [ ! -f $STATE_DIR/.${service}.port ] ; then
			free_port > $STATE_DIR/.${service}.port
		fi
	done
}

function checks() { # runs docker version checks
	if [ "`docker --version | cut -d " " -f3 | tr -d 'v'| cut -c1`" -lt 2 ]; \
		then echo "docker version is too old"; exit 1; fi
}

function build() { # builds docker images
	docker pull ubuntu:focal
	docker buildx build  --build-arg BUILDKIT_INLINE_CACHE=1 -t tempbuild \
		--cache-from=${IMAGE}:latest \
		--cache-from=${IMAGE}:next_release \
		--cache-from=${IMAGE}:${TAG} .
	docker tag tempbuild ${IMAGE}:${TAG}
}

function down() { # power down all containers
	docker ps | grep "${CONTAINER_SUFFIX}" | awk '{pri