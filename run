#!/usr/bin/env bash
#

function usage() {
	echo "USAGE:"
	echo "./run logmode CONFIG_FILE=< config.yaml >"
	echo "./run backtesting CONFIG_FILE=< config.yaml >"
	echo "./run testnet CONFIG_FILE=< config.yaml >"
	echo "./run live CONFIG_FILE=< config.yaml >"
	echo "./run compress-logs"
	echo "./run lastfewdays DAYS=3 PAIR=USDT"
	echo "./run download-price-logs FROM=20210101 TO=20211231"
	echo "./run prove-backtesting CONFIG_FILE=myconfig.yaml"
	echo "./run config-endpoint-service BIND=0.0.0.0 CONFIG_FILE=myconfig.yaml"
	echo "./run klines-caching-service BIND=0.0.0.0"
	echo "./run price_log_service BIND=0.0.0.0"
	echo "./run download_price_logs FROM=20220101 TO=20220131"
}

function free_port () { # looks for a free TCP port
    LPORT=32768;
    UPORT=60999;
    while true; do
        MPORT=$[$LPORT + ($RANDOM % $UPORT)];
        (echo "" >/dev/tcp/127.0.0.1/${MPORT}) >/dev/null 2>&1
        if [ $? -ne 0 ]; then
            echo $MPORT;
            return 0;
        fi
    done
}

function set_service_ports () { # locks a port to use by each service
	for service in $*
	do
		if [ ! -f $STATE_DIR/.${service}.port ] ; then
			free_port > $STATE_DIR/.${service}.port
		fi
	done
}

function checks() { # runs docker version checks
	if [ "`docker --version | cut -d " " -f3 | tr -d 'v'| cut -c1`" -lt 2 ]; \
		then echo "docker version is too old"; exit 1; fi
}

function build() { # builds docker images
	docker pull ubuntu:focal
	docker buildx build  --build-arg BUILDKIT_INLINE_CACHE=1 -t tempbuild \
		--cache-from=${IMAGE}:latest \
		--cache-from=${IMAGE}:next_release \
		--cache-from=${IMAGE}:${TAG} .
	docker tag tempbuild ${IMAGE}:${TAG}
}

function down() { # power down all containers
	docker ps | grep "${CONTAINER_SUFFIX}" | awk '{print $1}' | xargs -i docker kill {}
}

function latest() { # pulls :latest image tag
	docker pull ${IMAGE}:${TAG} >/dev/null
}

# this should become its own docker image
function download_price_logs() { # downloads klines logs fro binance
	if [ -z "$FROM" ]; then
		echo "FROM env variable not set"
		exit 1
	fi
	if [ -z "$TO" ]; then
		echo "TO env variable not set"
		exit 1
	fi

	docker run --rm \
		${USE_TTY} \
		${DOCKER_RUN_AS} \
		${DOCKER_NAME} \
		${DOCKER_MOUNTS} \
		${DOCKER_NETWORK} \
		${RUN_IN_BACKGROUND} \
		${IMAGE}:${TAG} \
    /cryptobot/.venv/bin/python -u  /cryptobot/utils/pull_klines.py \
		-s ${FROM} -e ${TO}
}

function docker_network() { # creates a docker network
	docker network ls |grep ${CONTAINER_SUFFIX} >/dev/null 2>&1 || docker network create ${CONTAINER_SUFFIX}
}

function logmode() { # runs in logmode
	docker run --rm \
		${USE_TTY} \
		${DOCKER_RUN_AS} \
		${DOCKER_NAME} \
		${DOCKER_MOUNTS} \
		${DOCKER_NETWORK} \
		${RUN_IN_BACKGROUND} \
		${IMAGE}:${TAG} \
		/cryptobot/.venv/bin/python -u app.py \
		-s /cryptobot/sec